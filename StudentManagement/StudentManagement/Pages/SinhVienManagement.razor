@page "/list-sv"
@using StudentManagement.gRPC.Services
@inject StudentManagement.gRPC.IServices.ISinhVienService SinhVienService
@inject StudentManagement.gRPC.IServices.ILopHocService LopHocService
@inject IJSRuntime JS

<h3>Danh sách sinh viên</h3>
<button class="btn btn-primary mb-3" @onclick="ShowAddForm">Thêm sinh viên</button>
<button class="btn btn-primary mb-3" @onclick="LoadSinhViensSortByNameAsync">Sắp xếp theo tên</button>
<div class="mb-3">
    <label for="searchMaSV" class="form-label">Tìm kiếm theo mã sinh viên</label>
    <input id="searchMaSV" class="form-control" @bind="searchMaSV" @bind:event="oninput" @onchange="SearchStudent" placeholder="Nhập mã sinh viên..." />
</div>

<table class="table">
    <thead>
        <tr>
            <th>Mã sinh viên</th>
            <th>Họ và tên</th>
            <th>Ngày sinh</th>
            <th>Địa chỉ</th>
            <th>Lớp học</th>
            <th>Chức năng</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sinhvien in sinhviens.SinhViens)
        {
            <tr>
                <td>@sinhvien.MaSV</td>
                <td>@sinhvien.TenSV</td>
                <td>@sinhvien.NgaySinh</td>
                <td>@sinhvien.DiaChi</td>
                <td>@sinhvien.MaLop</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ShowEditForm(sinhvien.MaSV)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => ShowDeleteForm(sinhvien.MaSV)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showAddModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm Sinh Viên</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddForm"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="maSV" class="form-label">Mã sinh viên</label>
                        <input id="maSV" class="form-control" @bind="newStudent.MaSV" type="number" />
                    </div>
                    <div class="mb-3">
                        <label for="tenSV" class="form-label">Họ và tên</label>
                        <input id="tenSV" class="form-control" @bind="newStudent.TenSV" />
                    </div>
                    <div class="mb-3">
                        <label for="ngaySinh" class="form-label">Ngày sinh</label>
                        <input id="ngaySinh" class="form-control" @bind="newStudent.NgaySinh" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="diaChi" class="form-label">Địa chỉ</label>
                        <input id="diaChi" class="form-control" @bind="newStudent.DiaChi" />
                    </div>
                    <div class="mb-3">
                        <label for="maLop" class="form-label">Lớp học</label>
                        <select id="maLop" class="form-select" @bind="newStudent.MaLop">
                            @foreach (var lop in classes.Lops)
                            {
                                <option value="@lop.MaLop">@lop.TenLop</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddForm">Hủy</button>
                    <button class="btn btn-primary" @onclick="AddSinhVien">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showEditModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chỉnh Sửa Sinh Viên</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseEditForm"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="maSV" class="form-label">Mã sinh viên</label>
                        <input id="maSV" class="form-control" @bind="sinhVienEdit.MaSV" type="number" disabled />
                    </div>
                    <div class="mb-3">
                        <label for="tenSV" class="form-label">Họ và tên</label>
                        <input id="tenSV" class="form-control" @bind="sinhVienEdit.TenSV" />
                    </div>
                    <div class="mb-3">
                        <label for="ngaySinh" class="form-label">Ngày sinh</label>
                        <input id="ngaySinh" class="form-control" @bind="sinhVienEdit.NgaySinh" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="diaChi" class="form-label">Địa chỉ</label>
                        <input id="diaChi" class="form-control" @bind="sinhVienEdit.DiaChi" />
                    </div>
                    <div class="mb-3">
                        <label for="maLop" class="form-label">Lớp học</label>
                        <select id="maLop" class="form-select" @bind="sinhVienEdit.MaLop">
                            <option value="">Chọn lớp</option>
                            @foreach (var lop in classes.Lops)
                            {
                                <option value="@lop.MaLop">@lop.TenLop</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEditForm">Hủy</button>
                    <button class="btn btn-primary" @onclick="UpdateSinhVien">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDeleteModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Xác nhận xóa sinh viên</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDeleteForm"></button>
                </div>
                <div class="modal-body">
                    <p class="text-danger fw-bold">Bạn có chắc chắn muốn xóa sinh viên này không?</p>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Mã sinh viên:</label>
                        <p>@sinhVienDelete.MaSV</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Họ và tên:</label>
                        <p>@sinhVienDelete.TenSV</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Ngày sinh:</label>
                        <p>@sinhVienDelete.NgaySinh?.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Địa chỉ:</label>
                        <p>@sinhVienDelete.DiaChi</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Lớp học:</label>
                        <p>@sinhVienDelete.MaLop</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDeleteForm">Hủy</button>
                    <button class="btn btn-danger" @onclick="DeleteSinhVien">Xóa</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}





@code {
    private StudentManagement.gRPC.DTOs.SinhVien.SinhVienListResponse? sinhviens = new();
    private StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVienAdd newStudent = new();
    private StudentManagement.gRPC.DTOs.SinhVien.SinhVienResponse sinhVienEdit = new();
    private StudentManagement.gRPC.DTOs.SinhVien.SinhVienResponse sinhVienDelete = new();
    private StudentManagement.gRPC.DTOs.Lop.LopListResponse classes = new();
    private bool showAddModal = false;
    private bool showEditModal = false;
    private bool showDeleteModal = false;
    private string searchMaSV = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSinhViensAsync();
        await LoadLopHocsAsync();
    }

    // default
    private async Task LoadSinhViensAsync()
    {
        sinhviens = await SinhVienService.GetListSinhVienAsync();
    }

    // sort by name
    private async Task LoadSinhViensSortByNameAsync()
    {
        sinhviens = await SinhVienService.SortSinhVienListByNameAsync();
    }

    // load item class in add and update form
    private async Task LoadLopHocsAsync()
    {
        classes = await LopHocService.GetListLopAsync();
    }

    // add
    private void ShowAddForm()
    {
        newStudent = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVienAdd();
        showAddModal = true;
    }
    private async Task AddSinhVien()
    {
        if (string.IsNullOrWhiteSpace(newStudent.TenSV) ||
        newStudent.NgaySinh == default ||
        string.IsNullOrWhiteSpace(newStudent.DiaChi))
        {
            await JS.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ thông tin sinh viên!");
            return;
        }
        var response = await SinhVienService.AddSinhVienAsync(newStudent);
        if (response == true)
        {
            showAddModal = false;
            await LoadSinhViensAsync();
            await JS.InvokeVoidAsync("alert", "Thêm sinh viên thành công!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Thêm sinh viên thất bại!");
        }
    }
    private void CloseAddForm()
    {
        showAddModal = false;
    }

    // edit
    private async Task ShowEditForm(int masv)
    {
        var requestsv = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVien { MaSV = masv };
        sinhVienEdit = await SinhVienService.SearchBySinhVienIdAsync(requestsv);
        showEditModal = true;
    }
    private async Task UpdateSinhVien()
    {
        if (string.IsNullOrWhiteSpace(sinhVienEdit.TenSV) ||
        sinhVienEdit.NgaySinh == default ||
        string.IsNullOrWhiteSpace(sinhVienEdit.DiaChi))
        {
            await JS.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ thông tin sinh viên!");
            return;
        }
        var response = await SinhVienService.UpdateSinhVienAsync(sinhVienEdit);
        if (response == true)
        {
            showAddModal = false;
            await LoadSinhViensAsync();
            await JS.InvokeVoidAsync("alert", "Chỉnh sửa sinh viên thành công!");
            CloseEditForm();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Chỉnh sửa sinh viên thất bại!");
        }
    }
    private void CloseEditForm()
    {
        showEditModal = false;
    }

    // delete
    private async Task ShowDeleteForm(int masv)
    {
        var requestsv = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVien { MaSV = masv };
        sinhVienDelete = await SinhVienService.SearchBySinhVienIdAsync(requestsv);
        showDeleteModal = true;
    }
    private async Task DeleteSinhVien()
    {
        var requestsv = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVien { MaSV = sinhVienDelete.MaSV };
        var response = await SinhVienService.DeleteSinhVienAsync(requestsv);
        if (response == true)
        {
            showAddModal = false;
            await LoadSinhViensAsync();
            await JS.InvokeVoidAsync("alert", "Xóa sinh viên thành công!");
            CloseDeleteForm();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Xóa sinh viên thất bại!");
        }
    }
    private void CloseDeleteForm()
    {
        showDeleteModal = false;
    }

    //search
    private async Task SearchStudent()
    {
        if (!string.IsNullOrWhiteSpace(searchMaSV))
        {
            var svrequest = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVien { MaSV = int.Parse(searchMaSV) };

            var sinhvien= await SinhVienService.SearchBySinhVienIdAsync(svrequest);
            if (sinhvien == null)
            {
                await JS.InvokeVoidAsync("alert", "Không tìm thấy sinh viên!");
                return;
            }
            sinhviens.SinhViens.Clear();
            sinhviens.SinhViens.Add(sinhvien);

        }
        else
        {
            await LoadSinhViensAsync();
        }
    }

}
