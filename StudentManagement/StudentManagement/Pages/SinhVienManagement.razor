@page "/list-sv"
@using StudentManagement.gRPC.Services
@inject StudentManagement.gRPC.IServices.ISinhVienService SinhVienService
@inject StudentManagement.gRPC.IServices.ILopHocService LopHocService

<h3>Danh sách sinh viên</h3>
<button class="btn btn-primary mb-3" @onclick="ShowAddForm">Thêm sinh viên</button>

<table class="table">
    <thead>
        <tr>
            <th>Mã sinh viên</th>
            <th>Họ và tên</th>
            <th>Ngày sinh</th>
            <th>Địa chỉ</th>
            <th>Lớp học</th>
            <th>Chức năng</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sinhvien in sinhviens.SinhViens)
        {
            <tr>
                <td>@sinhvien.MaSV</td>
                <td>@sinhvien.TenSV</td>
                <td>@sinhvien.NgaySinh</td>
                <td>@sinhvien.DiaChi</td>
                <td>@sinhvien.MaLop</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditSinhVien(sinhvien.MaSV)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteSinhVien(sinhvien.MaSV)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (showAddModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm Sinh Viên</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddForm"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="maSV" class="form-label">Mã sinh viên</label>
                        <input id="maSV" class="form-control" @bind="newStudent.MaSV" type="number" />
                    </div>
                    <div class="mb-3">
                        <label for="tenSV" class="form-label">Họ và tên</label>
                        <input id="tenSV" class="form-control" @bind="newStudent.TenSV" />
                    </div>
                    <div class="mb-3">
                        <label for="ngaySinh" class="form-label">Ngày sinh</label>
                        <input id="ngaySinh" class="form-control" @bind="newStudent.NgaySinh" type="date" />
                    </div>
                    <div class="mb-3">
                        <label for="diaChi" class="form-label">Địa chỉ</label>
                        <input id="diaChi" class="form-control" @bind="newStudent.DiaChi" />
                    </div>
                    <div class="mb-3">
                        <label for="maLop" class="form-label">Lớp học</label>
                        <select id="maLop" class="form-select" @bind="newStudent.MaLop">
                            <option value="">Chọn lớp</option>
                            @foreach (var lop in classes.Lops)
                            {
                                <option value="@lop.MaLop">@lop.TenLop</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddForm">Hủy</button>
                    <button class="btn btn-primary" @onclick="AddStudent">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@code {
    private StudentManagement.gRPC.DTOs.SinhVien.SinhVienListResponse? sinhviens = new();
    private StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVienAdd newStudent = new();
    private bool showAddModal = false;
    private StudentManagement.gRPC.DTOs.Lop.LopListResponse classes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSinhViensAsync();
        await LoadLopHocsAsync();
    }

    private async Task LoadSinhViensAsync()
    {
        sinhviens = await SinhVienService.GetListSinhVienAsync();
    }

    private async Task LoadLopHocsAsync()
    {
        classes = await LopHocService.GetListLopAsync();
    }

    private void ShowAddForm()
    {
        newStudent = new StudentManagement.gRPC.DTOs.SinhVien.RequestSinhVienAdd
        {
                LopResponse = new StudentManagement.gRPC.DTOs.SinhVien.SinhVienResponse().LopResponse
        };
        showAddModal = true;
    }

    private async Task AddStudent()
    {
        // var response = await SinhVienService.AddSinhVienAsync(newStudent);
        // if (response.IsSuccess)
        // {
        //     showAddModal = false;
        //     await LoadSinhViensAsync();
        // }
        // else
        // {
        //     Console.WriteLine("Thêm sinh viên thất bại: " + response.ErrorMessage);
        // }
    }

    private void CloseAddForm()
    {
        showAddModal = false;
    }

    private void EditSinhVien(int maSV)
    {
        // NavigationManager.NavigateTo($"/edit-sv/{maSV}");
    }

    private async Task DeleteSinhVien(int maSV)
    {
        // var request = new StudentManagement.gRPC.DTOs.Student.RequestSinhVien { MaSV = maSV };
        // var response = await SinhVienService.DeleteSinhVienAsync(request);

        // if (response.IsSuccess)
        // {
        //     await LoadSinhViensAsync();
        // }
        // else
        // {
        //     Console.WriteLine("Xóa sinh viên thất bại: " + response.ErrorMessage);
        // }
    }

}
